<?php

namespace Sentry\Laravel\Features;

use Illuminate\Console\Application as ConsoleApplication;
use Illuminate\Contracts\Events\Dispatcher;
use Illuminate\Console\Events as ConsoleEvents;
use Sentry\Breadcrumb;
use Sentry\Laravel\Features\Concerns\TracksPushedScopesAndSpans;
use Sentry\Laravel\Integration;
use Sentry\SentrySdk;
use Sentry\State\Scope;
use Sentry\Tracing\SpanStatus;
use Sentry\Tracing\TransactionContext;
use Sentry\Tracing\TransactionSource;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;

class ConsoleIntegration extends Feature
{
    use TracksPushedScopesAndSpans;

    private const FEATURE_KEY = 'command_info';

    public function isApplicable(): bool
    {
        return true;
    }

    public function onBoot(Dispatcher $events): void
    {
        ConsoleApplication::starting(static function (ConsoleApplication $console) {
            $console->getDefinition()->addOption(
                new InputOption('--sentry-trace', null, InputOption::VALUE_OPTIONAL, 'Trace the execution of this command using the Sentry SDK')
            );
        });

        $events->listen(ConsoleEvents\CommandStarting::class, [$this, 'commandStarting']);
        $events->listen(ConsoleEvents\CommandFinished::class, [$this, 'commandFinished']);
    }

    public function commandStarting(ConsoleEvents\CommandStarting $event): void
    {
        if (!$event->command) {
            return;
        }

        $shouldTrace = $event->input->hasOption('sentry-trace') && $event->input->getParameterOption('--sentry-trace') !== false;

        // If `--sentry-trace` is passed, we start a new transaction and optionally take the operation name from the option value
        if ($shouldTrace) {
            $sentryTraceOp = $event->input->getOption('sentry-trace');

            $context = TransactionContext::make()
                ->setName($event->command)
                ->setSource(TransactionSource::task())
                ->setOp($sentryTraceOp ?? 'console.command')
                ->setStartTimestamp(microtime(true));

            $transaction = SentrySdk::getCurrentHub()->startTransaction($context);

            $this->pushSpan($transaction);
        }

        Integration::configureScope(static function (Scope $scope) use ($event): void {
            $scope->setTag('command', $event->command);
        });

        if ($this->isBreadcrumbFeatureEnabled(self::FEATURE_KEY)) {
            Integration::addBreadcrumb(new Breadcrumb(
                Breadcrumb::LEVEL_INFO,
                Breadcrumb::TYPE_DEFAULT,
                'artisan.command',
                'Starting Artisan command: ' . $event->command,
                [
                    'input' => $this->extractConsoleCommandInput($event->input),
                ]
            ));
        }
    }

    public function commandFinished(ConsoleEvents\CommandFinished $event): void
    {
        if ($this->isBreadcrumbFeatureEnabled(self::FEATURE_KEY)) {
            Integration::addBreadcrumb(new Breadcrumb(
                Breadcrumb::LEVEL_INFO,
                Breadcrumb::TYPE_DEFAULT,
                'artisan.command',
                'Finished Artisan command: ' . $event->command,
                [
                    'exit' => $event->exitCode,
                    'input' => $this->extractConsoleCommandInput($event->input),
                ]
            ));
        }

        $span = $this->maybePopSpan();

        if ($span) {
            $span->finish();

            $span->setStatus($event->exitCode === 0 ? SpanStatus::ok() : SpanStatus::internalError());
        }

        // Flush any and all events that were possibly generated by the command
        Integration::flushEvents();

        Integration::configureScope(static function (Scope $scope): void {
            $scope->removeTag('command');
        });
    }

    /**
     * Extract the command input arguments if possible.
     *
     * @param \Symfony\Component\Console\Input\InputInterface|null $input
     *
     * @return string|null
     */
    private function extractConsoleCommandInput(?InputInterface $input): ?string
    {
        if ($input instanceof ArgvInput) {
            return (string)$input;
        }

        return null;
    }
}
