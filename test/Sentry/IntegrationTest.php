<?php

namespace Sentry\Laravel\Tests;

use Illuminate\Http\Request;
use Illuminate\Routing\Events\RouteMatched;
use Illuminate\Routing\Route;
use Mockery;
use Sentry\Event;
use Sentry\Laravel\Integration;
use Sentry\State\Scope;
use function Sentry\withScope;

class IntegrationTest extends SentryLaravelTestCase
{
    public function testIntegrationIsRegistered(): void
    {
        $integration = $this->getHubFromContainer()->getIntegration(Integration::class);

        $this->assertInstanceOf(Integration::class, $integration);
    }

    public function testTransactionIsSetWhenRouteMatchedEventIsFired(): void
    {
        if (!class_exists(RouteMatched::class)) {
            $this->markTestSkipped('RouteMatched event class does not exist on this version of Laravel.');
        }

        Integration::setTransaction(null);

        $event = new RouteMatched(
            new Route('GET', $routeUrl = '/sentry-route-matched-event', []),
            Mockery::mock(Request::class)->makePartial()
        );

        $this->dispatchLaravelEvent($event);

        $this->assertSame($routeUrl, Integration::getTransaction());
    }

    public function testTransactionIsSetWhenRouterMatchedEventIsFired(): void
    {
        Integration::setTransaction(null);

        $this->dispatchLaravelEvent('router.matched', [
            new Route('GET', $routeUrl = '/sentry-router-matched-event', []),
        ]);

        $this->assertSame($routeUrl, Integration::getTransaction());
    }

    public function testTransactionIsAppliedToEventWithoutTransaction(): void
    {
        Integration::setTransaction($transaction = 'some-transaction-name');

        withScope(function (Scope $scope) use ($transaction): void {
            $event = Event::createEvent();

            $this->assertNull($event->getTransaction());

            $event = $scope->applyToEvent($event);

            $this->assertNotNull($event);

            $this->assertSame($transaction, $event->getTransaction());
        });
    }

    public function testTransactionIsAppliedToEventWithEmptyTransaction(): void
    {
        Integration::setTransaction($transaction = 'some-transaction-name');

        withScope(function (Scope $scope) use ($transaction): void {
            $event = Event::createEvent();
            $event->setTransaction($emptyTransaction = '');

            $this->assertSame($emptyTransaction, $event->getTransaction());

            $event = $scope->applyToEvent($event);

            $this->assertNotNull($event);

            $this->assertSame($transaction, $event->getTransaction());
        });
    }

    public function testTransactionIsNotAppliedToEventWhenTransactionIsAlreadySet(): void
    {
        Integration::setTransaction('some-transaction-name');

        withScope(function (Scope $scope): void {
            $event = Event::createEvent();

            $event->setTransaction($eventTransaction = 'some-other-transaction-name');

            $this->assertSame($eventTransaction, $event->getTransaction());

            $event = $scope->applyToEvent($event);

            $this->assertNotNull($event);

            $this->assertSame($eventTransaction, $event->getTransaction());
        });
    }

    public function testExtractingNameForRouteWithName(): void
    {
        $route = (new Route('GET', '/foo', []))->name($routeName = 'foo-bar');

        $this->assertSame($routeName, Integration::extractNameForRoute($route));
    }

    public function testExtractingNameForRouteWithAction(): void
    {
        $route = (new Route('GET', '/foo', [
            'controller' => $controller = 'SomeController@someAction',
        ]));

        $this->assertSame($controller, Integration::extractNameForRoute($route));
    }

    public function testExtractingNameForRouteWithoutName(): void
    {
        $route = new Route('GET', $url = '/foo', []);

        $this->assertSame($url, Integration::extractNameForRoute($route));
    }

    public function testExtractingNameForRouteWithActionAndName(): void
    {
        $route = (new Route('GET', '/foo', [
            'controller' => 'SomeController@someAction',
        ]))->name($routeName = 'foo-bar');

        $this->assertSame($routeName, Integration::extractNameForRoute($route));
    }

    public function testExtractingNameForRouteWithAutoGeneratedName(): void
    {
        // We fake a generated name here, Laravel generates them each starting with `generated::`
        $route = (new Route('GET', $url = '/foo', []))->name('generated::KoAePbpBofo01ey4');

        $this->assertSame($url, Integration::extractNameForRoute($route));
    }

    public function testExtractingNameForRouteWithIncompleteGroupName(): void
    {
        $route = (new Route('GET', $url = '/foo', []))->name('group-name.');

        $this->assertSame($url, Integration::extractNameForRoute($route));
    }

    public function testExtractingNameForRouteWithStrippedBaseNamespaceFromAction(): void
    {
        Integration::setControllersBaseNamespace('BaseNamespace');

        $route = (new Route('GET', '/foo', [
            'controller' => 'BaseNamespace\\SomeController@someAction',
        ]));

        $this->assertSame('SomeController@someAction', Integration::extractNameForRoute($route));

        Integration::setControllersBaseNamespace(null);
    }

    public function testExtractingNameForLumenRouteWithName(): void
    {
        $route = [0, ['as' => $routeName = 'foo-bar'], []];

        $this->assertSame($routeName, Integration::extractNameForLumenRoute($route, '/some-route'));
    }

    public function testExtractingNameForLumenRouteWithAction(): void
    {
        $route = [0, ['uses' => $controller = 'SomeController@someAction'], []];

        $this->assertSame($controller, Integration::extractNameForLumenRoute($route, '/some-route'));
    }

    public function testExtractingNameForLumenRouteWithoutName(): void
    {
        $url = '/some-route';

        $this->assertSame($url, Integration::extractNameForLumenRoute([0, [], []], $url));
    }

    public function testExtractingNameForLumenRouteWithParamInUrl(): void
    {
        $route = [1, [], ['param1' => 'foo']];

        $url = '/foo/bar/baz';

        $this->assertSame('/{param1}/bar/baz', Integration::extractNameForLumenRoute($route, $url));
    }

    public function testExtractingNameForLumenRouteWithParamsInUrl(): void
    {
        $route = [1, [], ['param1' => 'foo', 'param2' => 'bar']];

        $url = '/foo/bar/baz';

        $this->assertSame('/{param1}/{param2}/baz', Integration::extractNameForLumenRoute($route, $url));
    }

    public function testExtractingNameForLumenRouteWithActionAndName(): void
    {
        $route = [0, [
            'as' => $routeName = 'foo-bar',
            'uses' => 'SomeController@someAction',
        ], []];

        $this->assertSame($routeName, Integration::extractNameForLumenRoute($route, '/some-route'));
    }

    public function testExtractingNameForLumenRouteWithAutoGeneratedName(): void
    {
        // We fake a generated name here, Laravel generates them each starting with `generated::`
        $route = [0, ['as' => 'generated::KoAePbpBofo01ey4'], []];

        $url = '/some-route';

        $this->assertSame($url, Integration::extractNameForLumenRoute($route, $url));
    }

    public function testExtractingNameForLumenRouteWithIncompleteGroupName(): void
    {
        $route = [0, ['as' => 'group-name.'], []];

        $url = '/some-route';

        $this->assertSame($url, Integration::extractNameForLumenRoute($route, $url));
    }

    public function testExtractingNameForLumenRouteWithStrippedBaseNamespaceFromAction(): void
    {
        Integration::setControllersBaseNamespace('BaseNamespace');

        $route = [0, ['uses' => 'BaseNamespace\\SomeController@someAction'], []];

        $this->assertSame('SomeController@someAction', Integration::extractNameForLumenRoute($route, '/some-route'));

        Integration::setControllersBaseNamespace(null);
    }
}
